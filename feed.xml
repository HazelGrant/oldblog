<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2016-09-07T20:00:00-04:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Testing Thoughts</title>
    <link rel="alternate" href="http://blog.url.com/2016/09/08/testing-thoughts.html"/>
    <id>http://blog.url.com/2016/09/08/testing-thoughts.html</id>
    <published>2016-09-07T20:00:00-04:00</published>
    <updated>2016-09-08T13:31:24-04:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;stubbing user/admin auth:
&lt;code&gt;ApplicationController.any_instance.stubs(:authenticate_admin).returns(nil)&lt;/code&gt;
&lt;code&gt;ApplicationController.any_instance.stubs(:authenticate_user).returns(nil)&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fill_trix&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scroll_to&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;attempt_login_with&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Selenium vs. Webkit&lt;/p&gt;

&lt;p&gt;Bucket of useful system/test helper methods that can be transferred between projects&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;wait&lt;em&gt;for&lt;/em&gt;ajax&lt;/li&gt;
&lt;li&gt;handle&lt;em&gt;js&lt;/em&gt;confirm&lt;/li&gt;
&lt;li&gt;t(&amp;amp;args)&lt;/li&gt;
&lt;li&gt;post&lt;em&gt;json/get&lt;/em&gt;json/put&lt;em&gt;json/delete&lt;/em&gt;json/etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Useful tactics for writing about tests&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For clients: metaphors, simple language, understanding what they are looking for, being able to relate what we&amp;rsquo;re doing to what you&amp;rsquo;re looking for, put aside developer sensibilities and aesthetics, let&amp;rsquo;s get pragmatic about this, you have a business to run, you have research to do, you have users to gather&lt;/li&gt;
&lt;li&gt;For new developers: identify ALL ASSUMPTIONS. if you are making an assumption, point it out. let new developer know that if they see an assumption we&amp;rsquo;re making without being aware of it, they should point it out. question. do not be afraid to say &amp;ldquo;I don&amp;rsquo;t know&amp;rdquo; or &amp;ldquo;I was wrong&amp;rdquo;&lt;/li&gt;
&lt;li&gt;For team: examples, data, code snippets, rationale, building habits, code reviews, pull requests, questioning, concise&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Simplest possible way to explain these things. Consistent test_helper file to start with.&lt;/p&gt;

&lt;p&gt;test/test_helper.rb&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
&lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'simplecov'&lt;/span&gt;
&lt;span class="no"&gt;SimpleCov&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;start&lt;/span&gt;

&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'rubygems'&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'database_cleaner'&lt;/span&gt;

&lt;span class="no"&gt;ENV&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"RAILS_ENV"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="s2"&gt;"test"&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;expand_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"../../config/environment"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;__FILE__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;"fabrication"&lt;/span&gt;
&lt;span class="no"&gt;Fabrication&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;configure&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;fabricator_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"test/fabricators"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;TestHelper&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setup&lt;/span&gt;
    &lt;span class="no"&gt;DatabaseCleaner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;strategy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:truncation&lt;/span&gt;
    &lt;span class="no"&gt;DatabaseCleaner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;clean&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;teardown&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;test/system_helper.rb&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
&lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'test_helper'&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'rack/test'&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'mocha/setup'&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'capybara/dsl'&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'capybara/rails'&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'capybara/webkit'&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;SystemHelper&lt;/span&gt;
  &lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;Capybara&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;DSL&lt;/span&gt;
  &lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;Rack&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Test&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;methods&lt;/span&gt;
  &lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;TestHelper&lt;/span&gt;
  &lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;url_helpers&lt;/span&gt;

  &lt;span class="no"&gt;Capybara&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Webkit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;configure&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;block_unknown_urls&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setup_capybara&lt;/span&gt;
    &lt;span class="no"&gt;Capybara&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;javascript_driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:webkit&lt;/span&gt;
    &lt;span class="no"&gt;Capybara&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;current_driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Capybara&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;javascript_driver&lt;/span&gt;
    &lt;span class="no"&gt;Capybara&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;default_max_wait_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;teardown_capybara&lt;/span&gt;
    &lt;span class="no"&gt;Capybara&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reset_sessions!&lt;/span&gt;
    &lt;span class="no"&gt;Capybara&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;use_default_driver&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Concepts&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Integration/Acceptance

&lt;ul&gt;
&lt;li&gt;Capybara&lt;/li&gt;
&lt;li&gt;Coping with Javascript-heavy applications&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Data management

&lt;ul&gt;
&lt;li&gt;Keeping the database clean between tests&lt;/li&gt;
&lt;li&gt;Using only the data needed to get the point across&lt;/li&gt;
&lt;li&gt;Performing only the actions necessary to get the point across (don&amp;rsquo;t save when an unsaved object will provide the information you need)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Keeping track of coverage

&lt;ul&gt;
&lt;li&gt;Lines covered - at least %80/application is what we&amp;rsquo;re aiming for&lt;/li&gt;
&lt;li&gt;Keep track of any lines of code that get hit by tests dozens/hundreds/even thousands of times - in a perfect world, each line of code is hit once&lt;/li&gt;
&lt;li&gt;Do tests pass/fail when they need to - are you actually testing what you think you&amp;rsquo;re testing&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Shared assumptions/&amp;ldquo;the way things are done&amp;rdquo; &amp;amp; explanations

&lt;ul&gt;
&lt;li&gt;&amp;ldquo;the way things are done&amp;rdquo; enables trust and consistency - reduces cognitive overhead, AT THE SAME TIME, comes with risks of complacency and inability to adapt to changing requirements/new tools, so question, but do not change unless you can convince everyone that the change will genuinely make things better&lt;/li&gt;
&lt;li&gt;minitest - simple, it&amp;rsquo;s &amp;ldquo;just ruby&amp;rdquo;, no expansive DSL to keep in mind - it&amp;rsquo;s the language of the application, shares roughly the same context&lt;/li&gt;
&lt;li&gt;capybara - slower, but useful in integration/system tests due to ease of navigating the browser&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Finding the time to test&lt;/li&gt;
&lt;li&gt;Deciding WHAT to test&lt;/li&gt;
&lt;li&gt;Balancing client budget with testing needs&lt;/li&gt;
&lt;li&gt;Dealing with untested code&lt;/li&gt;
&lt;li&gt;Give in to the way the code base does it, introduce change gradually, try to naturally fit into what&amp;rsquo;s already present - if what&amp;rsquo;s present sucks, then make it suck less incrementally&lt;/li&gt;
&lt;li&gt;Write tests for bugs before making bug fixes, as often as possible&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Resources&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Matt&amp;rsquo;s &lt;a href="http://littlelines.com/blog/2013/12/17/a-guide-for-writing-maintainable-rails-tests/"&gt;post&lt;/a&gt; from 2013&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Levels&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Explain testing to clients&lt;/li&gt;
&lt;li&gt;Explain testing to new developers&lt;/li&gt;
&lt;li&gt;Talk about testing (consistently) internally

&lt;ul&gt;
&lt;li&gt;What can we agree we need to trust from our tests?&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Random thoughts in no particular order&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Keep CSS selectors out of the code - prefer to test the things that are not going to change&lt;/li&gt;
&lt;li&gt;This is never going to be perfectly possible - big changes (especially with clients like Berggruen) will happen, and they will break tests - bear this in mind and make maintaining the test suite as important as getting the features right&lt;/li&gt;
&lt;li&gt;We use Minitest&lt;/li&gt;
&lt;li&gt;We use spec syntax&lt;/li&gt;
&lt;li&gt;Do not nest describe blocks more than two levels deep (too much context)&lt;/li&gt;
&lt;li&gt;If it&amp;rsquo;s hard to set up a test, there&amp;rsquo;s too much going on&lt;/li&gt;
&lt;li&gt;When you fix specific bugs, use TDD&lt;/li&gt;
&lt;li&gt;When writing a feature where TDD gets in the way instead of helping, test after the fact and use a &amp;ldquo;tdd&amp;rdquo;-ish process, where you comment out segments of code, write a test that should fail, ensure the test fails, uncomment code, ensure test passes&lt;/li&gt;
&lt;li&gt;Prefer &lt;code&gt;let(:variable) { SOMETHING }&lt;/code&gt; over &lt;code&gt;before { variable = SOMETHING }&lt;/code&gt; - keep the database clean between tests!&lt;/li&gt;
&lt;li&gt;Use Capybara for integration/acceptance/feature specs (do we have any agreed upon way of doing this? Accept that each client may be different, and have a preference for greenfields?)&lt;/li&gt;
&lt;li&gt;Use headless driver when possible - it&amp;rsquo;s faster, but not as easy to debug. We could keep a non-headless driver around for debugging but there are inconsistencies between the two.&lt;/li&gt;
&lt;li&gt;Tests that pass locally often fail in Semaphore, inconsistently. We have a few projects with tests that consistently fail to be consistent when they hit Semaphore - put some sort of bounty on figuring these things out?&lt;/li&gt;
&lt;li&gt;Prefer unit tests over system/integration specs - they&amp;rsquo;re faster, and the easier they are to write, the more modular the code is&lt;/li&gt;
&lt;li&gt;Keep structure of language in tests consistent&lt;/li&gt;
&lt;li&gt;Keep similar tests similar to each other - let the differences stand out&lt;/li&gt;
&lt;li&gt;Avoid Mocks &amp;amp; Stubs for the most part - use Mocha where absolutely necessary&lt;/li&gt;
&lt;li&gt;Avoid saving or creating objects in the database when instantiating will work just as well (speed)&lt;/li&gt;
&lt;li&gt;Do not create more objects that you need&lt;/li&gt;
&lt;li&gt;Do not let the data confuse the intent of the test - use data that is obviously junk so that it&amp;rsquo;s obvious what does and does not matter (example: instead of &amp;lsquo;company&lt;em&gt;name: AT&amp;amp;T&amp;rsquo; use &amp;#39;company&lt;/em&gt;name: Some Random Company Name&amp;rsquo; or &amp;#39;company_name: zzzzz&amp;rsquo;)&lt;/li&gt;
&lt;li&gt;TestHelper module for unit test helper methhods&lt;/li&gt;
&lt;li&gt;AcceptanceHelper/SystemHelper for acceptance/system test helper methods (generally with capybara)&lt;/li&gt;
&lt;li&gt;For System tests, it&amp;rsquo;s faster to stub out authentication instead of manually having the test user sign in before each and every test - unless specifically testing sign in/sign out process&lt;/li&gt;
&lt;li&gt;If you port code over from other projects, make sure to bring along associated tests and double check for context-specific code that needs to be removed/changed&lt;/li&gt;
&lt;li&gt;Use DatabaseCleaner to ensure that sweet clean database&lt;/li&gt;
&lt;li&gt;Use SimpleCov to track progress&lt;/li&gt;
&lt;li&gt;Things to look for: large swatches of code that are missed, or particular segments of code that are hit by the test swuite an unreasonable amount of times&lt;/li&gt;
&lt;li&gt;Put SimpleCov.start AT THE VERY TOP OF THE TEST HELPER FILE or things will get missed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Points for clients:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Yeah, we spend time on it - is worth it. Code bases quickly grow complex and we developers need to make up for the fact that our brains are not giant super computers by putting the context we know when we know it into formal terms, so that the knowledge of that context still exists in the code base even after we&amp;rsquo;ve moved on to a different context. That is probably not the way to explain to clients.&lt;/li&gt;
&lt;li&gt;Try again.&lt;/li&gt;
&lt;li&gt;Money. Time now saves time later. Time now keeps the project from being dead later. Time now makes your code base healthier. It&amp;rsquo;s healthier because of bugs. Let&amp;rsquo;s try to explain this to a non-developer.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Think about your calendar. You have a lot to do on any given day and it can be difficult to keep that all in your head. So you use technological extensions that exist outside of yourself in order to store what you know now about what you need to do tomorrow. Now you don&amp;rsquo;t need to worry about whether you remember that knowledge tomorrow, because your calendar is going to ping you. You save a lot of time and energy not having to think about all of the things you have to do all of the time. If you had to sit down every few minutes and think to yourself, &amp;ldquo;Do I have anything I need to do in the next hour?&amp;rdquo; and you had to recall all of the things that you have to do in the next few days, or weeks, or months, and think about when and where they happen and whether or not any of those things happen in the next hour, you would lose a lot of time just trying to remember everything. But you don&amp;rsquo;t often have to think to yourself about what you&amp;rsquo;re saving by using the calendar. And yes, it requires some maintenance to keep the calendar. Tests are the same way.&lt;/p&gt;

&lt;p&gt;Tests encode intention. They keep the context even when we lose it, because we write the context into the tests when it&amp;rsquo;s fresh in our minds. It&amp;rsquo;s not that we don&amp;rsquo;t work hard to think about what we might be effecting in the code base when we make changes - just like you try to be aware of when your next meeting is so you&amp;rsquo;re mentally prepared even if you know the calendar is going to buzz you and you don&amp;rsquo;t actually NEED to know. It&amp;rsquo;s a layer of security. It&amp;rsquo;s a layer of security that becomes more and more important as the code base gets bigger and capable of doing more and more things. However, if we don&amp;rsquo;t take care of the test suite while the code base is small, then getting the test suite up to snuff when the code base is big enough for it to REALLY matter is a huge and laborous feat, requiring us to remember all of the context. It&amp;rsquo;s too easy to miss everything.&lt;/p&gt;

&lt;p&gt;You keep your appointments more consistently with a calendar and we keep our code base bug free more consistently with a good test suite. And the better that test suite is designed and managed, the easier the entire code base is to design and manage - this saves time. Think about it - take my word for it - blah - it&amp;rsquo;s much easier to put the context as it&amp;rsquo;s supposed to be down in a test when the context is fresh in your mind. Yes it adds some time to the process of developing. But when we find a bug in untested code, it takes even MORE time, because we have to reliably reproduce the bug, figure out where it&amp;rsquo;s coming from, make a fix, and then somehow guarantee that the fix we made didn&amp;rsquo;t just break or touch a dozen other things.&lt;/p&gt;

&lt;p&gt;Relate what clients care about to testing - how does testing lead to more users? How does testing lead to happier users? How does testing lead to users more willing to part with their cash? &amp;gt;_&amp;gt; Blah blah blah.&lt;/p&gt;

&lt;p&gt;Points for new developers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Assumptions we make and things we do because consistency is important: minitest over rspec, spec syntax, keep to basic assertions (assert, refute) and try to avoid more complicated ones (assert_equal, however, gives a better error message than assert this == that)&lt;/li&gt;
&lt;li&gt;Consider taking the time to write the test to be AS IMPORTANT, AN INTEGRAL PART OF writing the code that needs to get written&lt;/li&gt;
&lt;li&gt;Run the test suite as often as possible - ESPECIALLY if the code base doesn&amp;rsquo;t go through Semaphore (it really should go through Semaphore though)&lt;/li&gt;
&lt;li&gt;If the test suite is unbearably slow, take some time to speed it up - let Nate deal with worrying about billing/explaining to clients why somebody spent four hours on testing instead of their newest shiny feature&lt;/li&gt;
&lt;li&gt;Also research more about testing and help us get some language together to explain to clients why this is worth our time/their money&lt;/li&gt;
&lt;li&gt;Guiding principles - a lot of them as seen in &amp;ldquo;thoughts in no particular order&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How we talk about testing internally:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Do you run the test suite before commiting? If not, why? What can we do to make this easier for you to do and remember?&lt;/li&gt;
&lt;li&gt;Do you write tests when you submit a change?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;THE MORE JS-INTENSIVE AN APP IS, THE WORSE THE TEST SUITE IS GOING TO BE
when testing js, do not test specific js functionality - test the IMPORTANT side effects&lt;/p&gt;

&lt;p&gt;acceptance tests that need to work with JS and require a JS-friendly driver need special care
they are prone to fits and spats of crappiness - lots of waiting for ajax requests and whatnot, lots of reloading the browser again, and again, and again in order to get all of the context rolling for each and every individual test&lt;/p&gt;

&lt;p&gt;Do not forget nil values. Do not forget that the data IS GOING TO COME IN WONKY AT SOME POINT.&lt;/p&gt;

&lt;p&gt;Be careful with tests that loop over data and make an assertion per loop - your messages are going to suck and it&amp;rsquo;ll be harder to debug&lt;/p&gt;

&lt;p&gt;In tests, it&amp;rsquo;s important to balance the desire to make code DRY with the understanding that the tests need to be thorough (we look for &amp;gt; 80% per project), fast, readable, easy to debug, etc.&lt;/p&gt;

&lt;p&gt;We could keep a list of projects in need of testing love. Of course we also have to bear in mind that some clients do not have the budget to get crazy with testing. But taking ten or fifteen minutes here or there to bump a test suite that&amp;rsquo;s at 30% to 33% is worth the time and effort - especially if it&amp;rsquo;s a consistent thing.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Typography</title>
    <link rel="alternate" href="http://blog.url.com/2016/09/03/typography.html"/>
    <id>http://blog.url.com/2016/09/03/typography.html</id>
    <published>2016-09-03T10:04:00-04:00</published>
    <updated>2016-09-08T13:31:25-04:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;This is some copy that is meaningfully relevant. Testing paragraphs usually involves some amount of &lt;em&gt;lorem ipsum&lt;/em&gt;-ing, but I&amp;rsquo;m going to be different. I resolve to be different. Just like Apple. OK, no, actually, we&amp;rsquo;re not going to be like Apple. We&amp;rsquo;re going to be different from Apple. So we&amp;rsquo;re going to do something different from thinking different. Which means we&amp;rsquo;re going to think&amp;hellip; same? But then by thinking same, we&amp;rsquo;re thinking different from Apple, so really we&amp;rsquo;re thinking different just the same as Apple but&amp;hellip; oh, my god I can&amp;rsquo;t handle this paragraph. Moving on.&lt;/p&gt;

&lt;p&gt;This unordered list will save the day:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Important thing numero does not matter&lt;/li&gt;
&lt;li&gt;Other important thing&lt;/li&gt;
&lt;li&gt;I am, also, an important thing!&lt;/li&gt;
&lt;li&gt;Actually, I&amp;rsquo;m not important - how the hell did I get here?&lt;/li&gt;
&lt;li&gt;This is not my beautiful house&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But maybe we&amp;rsquo;d rather have an ordered list. It is, after all, more sane. Right?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;I am the first thing&lt;/li&gt;
&lt;li&gt;I am the second thing&lt;/li&gt;
&lt;li&gt;I may be more sane&lt;/li&gt;
&lt;li&gt;Or am I?

&lt;ol&gt;
&lt;li&gt;List INCEPTION!&lt;/li&gt;
&lt;li&gt;What was done&lt;/li&gt;
&lt;li&gt;Could not be undone&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And let&amp;rsquo;s break some things up:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;I amar prestar aen.&lt;/em&gt;
The world has changed.
&lt;em&gt;Han matho ne nen.&lt;/em&gt;
I feel it in the water.
&lt;em&gt;Han mathon ned cae.&lt;/em&gt;
I feel it in the earth.
&lt;em&gt;A han noston ned gwilith.&lt;/em&gt;
I smell it in the air.&lt;/p&gt;

&lt;p&gt;Much that once was is lost, for none now live who remember it.&lt;/p&gt;

&lt;p&gt;It began with the forging of the Great Rings. Three were given the elves, immortal, wisest and fairest of all beings. Seven to the Dwarf Lords, great miners and craftsmen of the mountain halls. And nine, nine rings were gifted to the race of Men, who above all else desire power. For within these rings was bound the strength and the will to govern each race. But they were all of them deceived, for another ring was made. Deep in the land of Mordor, in the Fires of Mount Doom, the Dark Lord Sauron forged a master ring, and into this ring he poured his cruelty, his malice, and his will to dominate all life.&lt;/p&gt;

&lt;p&gt;One ring to rule them all.&lt;/p&gt;

&lt;p&gt;One by one, the free lands of Middle Earth fell to the power of the Ring, but there were some who resisted. A last alliance of men and elves marched against the armies of Mordor, and on the very slopes of Mount Doom, they fought for the freedom of Middle Earth. Victory was near, but the power of the ring could not be undone. It was in this moment, when all hope had faded, that Isildur, son of the king, took up his father&amp;rsquo;s sword.&lt;/p&gt;

&lt;p&gt;Sauron, enemy of the free peoples of Middle Earth, was defeated. The Ring passed to Isildur, who had this once chance to destroy evil forever. But the hearts of men are easily corrupted. And the ring of power has a will of its own. It betrayed Isildur, to his death.&lt;/p&gt;

&lt;p&gt;And some things that should not have been forgotten were lost. History became legend. Legend became myth. And for two and a half thousand years the Ring passed out of all knowledge. Until, when chance came, it ensnared another bearer.&lt;/p&gt;

&lt;p&gt;It came to the creature Gollum, who took it deep into the tunnels of the Misty Mountains. And there it consumed him. The Ring gave to Gollum unnatural long life. For five hundred years it poisoned his mind, and in the gloom of Gollum&amp;rsquo;s cave, it waited. Darkness crept back into the forests of the world. Rumor grew of a shadow in the East, whispers of a nameless fear, and the Ring of Power perceived its time had come. It abandoned Gollum. But something happened then the Ring did not intend. It was picked up by the most unlikely creature imaginable: a hobbit, Bilbo Baggings, of the Shire.&lt;/p&gt;

&lt;p&gt;For the time will soon come when hobbits will shape the fortunes of all.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p class="lead"&gt;
  I am lead text. Hear me roar!
&lt;/p&gt;

&lt;p&gt;I will be the hugged paragraph. The paragraph below is going to hug me. Watch it hug me real good!&lt;/p&gt;

&lt;p class="hug"&gt;I am so loveable huggable wonderful luggable!&lt;/p&gt;

&lt;p&gt;Go home, paragraph. You&amp;rsquo;re drunk.&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
&lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;This&lt;/span&gt;
  &lt;span class="kp"&gt;attr_accessor&lt;/span&gt; &lt;span class="ss"&gt;:life&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;
    &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;life&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Life&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;real?&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="no"&gt;Life&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;fantasy?&lt;/span&gt;
    &lt;span class="n"&gt;landslide&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;landslide&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;reality&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
      &lt;span class="n"&gt;look_up_to_the_skies&lt;/span&gt;

      &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;wealth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;sex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;Sex&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;MALE&lt;/span&gt;

      &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;sympathies&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:need&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;easy_come&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;easy_go&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
        &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;high&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;low&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;

      &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;matter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;wind_direction&lt;/span&gt;

      &lt;span class="no"&gt;Piano&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;play&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="kp"&gt;private&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;look_up_to_the_skies&lt;/span&gt;
    &lt;span class="n"&gt;character&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;eyes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;eye&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="n"&gt;eye&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;open&lt;/span&gt;
      &lt;span class="n"&gt;eye&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;look&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;direction: &lt;/span&gt;&lt;span class="s1"&gt;'sky'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;eye&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;see&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;direction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wind&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;wind&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;direction&lt;/span&gt;
    &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="s1"&gt;'north'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'south'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'east'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'west'&lt;/span&gt;
      &lt;span class="kp"&gt;false&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;easy_come_easy_go&lt;/span&gt;
    &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;come_difficulty&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="no"&gt;Difficulty&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;EASY&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
      &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;go_difficulty&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="no"&gt;Difficulty&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;EASY&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;little_high_little_low&lt;/span&gt;
    &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;high&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;low&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;source: &lt;a href="https://i.reddituploads.com/85fcf7342bae46a290bb117acade28f5?fit=max&amp;amp;h=1536&amp;amp;w=1536&amp;amp;s=70366996b9866f91ff1fc98e310583e2"&gt;Reddit&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Headings&lt;/h2&gt;

&lt;h1&gt;H1 Heading&lt;/h1&gt;

&lt;h2&gt;H2 Heading&lt;/h2&gt;

&lt;h3&gt;H3 Heading&lt;/h3&gt;

&lt;h4&gt;H4 Heading&lt;/h4&gt;

&lt;h5&gt;H5 Heading&lt;/h5&gt;

&lt;h6&gt;H6 Heading&lt;/h6&gt;
</content>
  </entry>
</feed>
